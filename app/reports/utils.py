import io
import os
import csv
from datetime import datetime, date
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from openpyxl import Workbook
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

from app.models.incident import Incident

async def fetch_incidents_by_date(db: AsyncSession, start_date: date, end_date: date) -> list[dict]:
    stmt = select(Incident).where(
        Incident.created_at >= datetime.combine(start_date, datetime.min.time()),
        Incident.created_at <= datetime.combine(end_date, datetime.max.time())
    )
    result = await db.execute(stmt)
    incidents = result.scalars().all()

    return [{
        "id": i.id,
        "title": i.title,
        "status": i.status,
        "priority": i.priority,
        "created_at": i.created_at.strftime("%Y-%m-%d %H:%M")
    } for i in incidents]

def generate_pdf(data: list[dict], username: str = "User") -> bytes:
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    elements = []
    styles = getSampleStyleSheet()

    logo_path = os.path.join("app", "static", "logo.png")
    if os.path.exists(logo_path):
        logo = Image(logo_path, width=120, height=50)
        elements.append(logo)
        elements.append(Spacer(1, 12))

    title = Paragraph("Incident Report", styles["Title"])
    elements.append(title)
    elements.append(Spacer(1, 12))

    table_data = [["ID", "Title", "Status", "Priority", "Created At"]]
    for item in data:
        table_data.append([
            str(item["id"]),
            item["title"],
            item["status"],
            item["priority"],
            item["created_at"]
        ])

    table = Table(table_data, colWidths=[40, 150, 70, 70, 120])
    style = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#1f77b4")),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('GRID', (0, 0), (-1, -1), 0.25, colors.grey),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
    ])

    for i, item in enumerate(data, start=1):
        color = colors.whitesmoke
        if item["priority"] == "high":
            color = colors.HexColor("#ffcccc")
        elif item["priority"] == "medium":
            color = colors.HexColor("#fff2cc")
        elif item["priority"] == "low":
            color = colors.HexColor("#ccffcc")

        style.add('BACKGROUND', (0, i), (-1, i), color)

    table.setStyle(style)
    elements.append(table)
    elements.append(Spacer(1, 24))

    footer = Paragraph(f"Generated by: {username} | Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}", styles["Normal"])
    elements.append(footer)

    doc.build(elements)
    buffer.seek(0)
    return buffer.read()

def generate_csv(data: list[dict]) -> bytes:
    buffer = io.StringIO()
    writer = csv.DictWriter(buffer, fieldnames=["id", "title", "status", "priority", "created_at"])
    writer.writeheader()
    writer.writerows(data)
    return buffer.getvalue().encode("utf-8")

def generate_excel(data: list[dict]) -> bytes:
    wb = Workbook()
    ws = wb.active
    ws.title = "Incidents"
    headers = ["ID", "Title", "Status", "Priority", "Created At"]
    ws.append(headers)

    for item in data:
        ws.append([
            item["id"],
            item["title"],
            item["status"],
            item["priority"],
            item["created_at"]
        ])

    for column_cells in ws.columns:
        length = max(len(str(cell.value)) for cell in column_cells)
        ws.column_dimensions[column_cells[0].column_letter].width = length + 2

    output = io.BytesIO()
    wb.save(output)
    output.seek(0)
    return output.read()
