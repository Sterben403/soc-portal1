version: "3.9"

services:
  # === Database ===
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: soc_portal
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - soc_network

  # === Keycloak Database ===
  kc-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${KC_DB_USER}
      POSTGRES_PASSWORD: ${KC_DB_PASS}
      POSTGRES_DB: ${KC_DB_NAME}
    volumes:
      - kc_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KC_DB_USER} -d ${KC_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - soc_network

  # === Backend ===
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/soc_portal
      - SECRET_KEY=${SECRET_KEY}
      - CSRF_SECRET=${CSRF_SECRET}
      - COOKIE_SECURE=true
      - COOKIE_SAMESITE=None
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_started
    restart: unless-stopped
    networks:
      - soc_network
    volumes:
      - attachments:/app/attachments

  # === Keycloak ===
  keycloak:
    image: quay.io/keycloak/keycloak:26.0
    depends_on:
      kc-db:
        condition: service_healthy
    command: ["start"]
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_USERNAME: ${KC_DB_USER}
      KC_DB_PASSWORD: ${KC_DB_PASS}
      KC_DB_URL_HOST: kc-db
      KC_DB_URL_DATABASE: ${KC_DB_NAME}
      KC_DB_URL_PORT: 5432
      KC_HTTP_ENABLED: "true"
      KC_PROXY_HEADERS: xforwarded
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_ADMIN: ${KEYCLOAK_HOSTNAME}
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
    restart: unless-stopped
    networks:
      - soc_network

  # === Frontend Build ===
  frontend-build:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - frontend_build:/app/dist
    networks:
      - soc_network

  # === Nginx ===
  nginx:
    image: nginx:alpine
    depends_on:
      - backend
      - frontend-build
    volumes:
      - ./infra/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - frontend_build:/usr/share/nginx/html:ro
    ports:
      - "80:80"
    restart: unless-stopped
    networks:
      - soc_network

    # === Certbot for Let's Encrypt ===
    certbot:
      image: certbot/certbot
      volumes:
        - certbot-etc:/etc/letsencrypt
        - certbot-var:/var/lib/letsencrypt
      command: certonly --webroot --webroot-path=/var/www/certbot --email ${LETSENCRYPT_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
      networks:
        - soc_network

  # === Certbot Renewal Cron ===
  certbot-renew:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    command: renew
    restart: unless-stopped
    networks:
      - soc_network

volumes:
  pg_data:
  kc_pgdata:
  attachments:
  frontend_build:
  certbot-etc:
  certbot-var:

networks:
  soc_network:
    driver: bridge






