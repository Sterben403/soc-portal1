#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π –∏ —Ç–µ—Å—Ç-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Keycloak (—Ç–æ–ª—å–∫–æ admin/analyst/manager/client)
–∞ —Ç–∞–∫–∂–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ soc-portal (redirectUris, webOrigins, PKCE).

–ó–∞–ø—É—Å–∫:
    python setup_roles.py
"""

import requests

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
KC_BASE_URL = "http://localhost:8080"
KC_ADMIN_USER = "admin"
KC_ADMIN_PASSWORD = "admin123"

REALM_NAME = "soc-portal"
CLIENT_ID = "soc-portal"

# –ü—Ä–æ–µ–∫—Ç—ã/–æ–∫—Ä—É–∂–µ–Ω–∏—è: –ª–æ–∫–∞–ª–∫–∞ –∏ —Å–µ—Ä–≤–µ—Ä –ø–æ IP (–∫–∞–∫ —É —Ç–µ–±—è)
REDIRECT_URIS = [
    # prod / –æ–±–ª–∞–∫–æ
    "http://5.63.120.30/*",
    "http://5.63.120.30",
    "http://5.63.120.30/auth/callback",
    # local dev
    "http://localhost:3000/*",
    "http://localhost:3000",
    "http://localhost:5173/*",
    "http://localhost:5173",
    "http://localhost:3000/auth/callback",
    "http://localhost:5173/auth/callback",
]

WEB_ORIGINS = [
    "http://5.63.120.30",
    "http://localhost:3000",
    "http://localhost:5173",
]

# –†–æ–ª–∏ ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Ç—ã –ø–æ–ø—Ä–æ—Å–∏–ª
ROLES = [
    {"name": "admin",   "description": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"},
    {"name": "analyst", "description": "–ê–Ω–∞–ª–∏—Ç–∏–∫ SOC ‚Äî –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã/—Ç–∏–∫–µ—Ç—ã/–æ—Ç—á—ë—Ç—ã"},
    {"name": "manager", "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –æ–±–∑–æ—Ä/–æ—Ç—á—ë—Ç—ã/—á—Ç–µ–Ω–∏–µ"},
    {"name": "client",  "description": "–ö–ª–∏–µ–Ω—Ç ‚Äî —Å–≤–æ–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã/—Ç–∏–∫–µ—Ç—ã"},
]

# –¢–µ—Å—Ç-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–¥ –∫–∞–∂–¥—É—é —Ä–æ–ª—å
TEST_USERS = [
    {"username": "admin",   "email": "admin@example.com",   "firstName": "Admin",   "lastName": "User",   "password": "admin123",   "role": "admin"},
    {"username": "analyst", "email": "analyst@example.com", "firstName": "SOC",     "lastName": "Analyst","password": "analyst123", "role": "analyst"},
    {"username": "manager", "email": "manager@example.com", "firstName": "Manager", "lastName": "User",   "password": "manager123", "role": "manager"},
    {"username": "client",  "email": "client@example.com",  "firstName": "Client",  "lastName": "User",   "password": "client123",  "role": "client"},
]


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def _headers(token: str) -> dict:
    return {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json",
    }


def get_admin_token() -> str:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ master-realm."""
    url = f"{KC_BASE_URL}/realms/master/protocol/openid-connect/token"
    data = {
        "username": KC_ADMIN_USER,
        "password": KC_ADMIN_PASSWORD,
        "grant_type": "password",
        "client_id": "admin-cli",
    }
    r = requests.post(url, data=data, timeout=20)
    r.raise_for_status()
    return r.json()["access_token"]


def ensure_client(token: str):
    """–°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º OIDC-–∫–ª–∏–µ–Ω—Ç soc-portal (public, PKCE, redirect/webOrigins)."""
    h = _headers(token)

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ clientId
    r = requests.get(
        f"{KC_BASE_URL}/admin/realms/{REALM_NAME}/clients?clientId={CLIENT_ID}",
        headers=h, timeout=20
    )
    r.raise_for_status()
    items = r.json()

    body = {
        "clientId": CLIENT_ID,
        "protocol": "openid-connect",
        "enabled": True,
        "publicClient": True,
        "standardFlowEnabled": True,         # Authorization Code + PKCE
        "directAccessGrantsEnabled": False,  # ROPC –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è SPA
        "serviceAccountsEnabled": False,
        "redirectUris": sorted(set(REDIRECT_URIS)),
        "webOrigins": sorted(set(WEB_ORIGINS)),
        "attributes": {
            "pkce.code.challenge.method": "S256",
        },
    }

    if items:
        client_id_internal = items[0]["id"]
        u = requests.put(
            f"{KC_BASE_URL}/admin/realms/{REALM_NAME}/clients/{client_id_internal}",
            headers=h, json=body, timeout=20
        )
        if u.status_code in (204, 201):
            print("‚ôªÔ∏è  –ö–ª–∏–µ–Ω—Ç soc-portal –æ–±–Ω–æ–≤–ª—ë–Ω")
        else:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {u.status_code} {u.text}")
    else:
        c = requests.post(
            f"{KC_BASE_URL}/admin/realms/{REALM_NAME}/clients",
            headers=h, json=body, timeout=20
        )
        if c.status_code == 201:
            print("‚úÖ –ö–ª–∏–µ–Ω—Ç soc-portal —Å–æ–∑–¥–∞–Ω")
        elif c.status_code == 409:
            print("‚ÑπÔ∏è  –ö–ª–∏–µ–Ω—Ç soc-portal —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–≥–æ–Ω–∫–∞) ‚Äî –æ–∫")
        else:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {c.status_code} {c.text}")


def ensure_roles(token: str):
    """–°–æ–∑–¥–∞—ë–º —Ä–æ–ª–∏ (idempotent)."""
    h = _headers(token)
    for role in ROLES:
        r = requests.post(
            f"{KC_BASE_URL}/admin/realms/{REALM_NAME}/roles",
            headers=h, json=role, timeout=20
        )
        if r.status_code == 201:
            print(f"‚úÖ –†–æ–ª—å '{role['name']}' —Å–æ–∑–¥–∞–Ω–∞")
        elif r.status_code == 409:
            print(f"‚ÑπÔ∏è  –†–æ–ª—å '{role['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ '{role['name']}': {r.status_code} {r.text}")


def get_realm_role(token: str, role_name: str) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Ä–æ–ª–∏ realm‚Äô–∞."""
    h = _headers(token)
    r = requests.get(
        f"{KC_BASE_URL}/admin/realms/{REALM_NAME}/roles/{role_name}",
        headers=h, timeout=20
    )
    r.raise_for_status()
    return r.json()


def get_or_create_user(token: str, username: str, email: str, first: str, last: str, password: str) -> str:
    """–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º. –í–æ–∑–≤—Ä–∞—â–∞–µ–º user_id."""
    h = _headers(token)
    # –ø–æ–∏—Å–∫
    s = requests.get(
        f"{KC_BASE_URL}/admin/realms/{REALM_NAME}/users?username={username}",
        headers=h, timeout=20
    )
    s.raise_for_status()
    items = s.json()
    if items:
        user_id = items[0]["id"]
        # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        u = requests.put(
            f"{KC_BASE_URL}/admin/realms/{REALM_NAME}/users/{user_id}",
            headers=h,
            json={"email": email, "firstName": first, "lastName": last, "enabled": True, "emailVerified": True},
            timeout=20
        )
        if u.status_code not in (204, 201):
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {u.status_code} {u.text}")
    else:
        # —Å–æ–∑–¥–∞—ë–º
        c = requests.post(
            f"{KC_BASE_URL}/admin/realms/{REALM_NAME}/users",
            headers=h,
            json={
                "username": username,
                "email": email,
                "firstName": first,
                "lastName": last,
                "enabled": True,
                "emailVerified": True,
                "credentials": [{"type": "password", "value": password, "temporary": False}],
                "requiredActions": []
            },
            timeout=20
        )
        if c.status_code not in (201, 409):
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {c.status_code} {c.text}")
        # –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id
        s2 = requests.get(
            f"{KC_BASE_URL}/admin/realms/{REALM_NAME}/users?username={username}",
            headers=h, timeout=20
        )
        s2.raise_for_status()
        items = s2.json()
        if not items:
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
        user_id = items[0]["id"]

    # —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è (–Ω–∞ –≤—Å—è–∫–∏–π)
    rp = requests.put(
        f"{KC_BASE_URL}/admin/realms/{REALM_NAME}/users/{user_id}/reset-password",
        headers=h,
        json={"type": "password", "value": password, "temporary": False},
        timeout=20
    )
    if rp.status_code not in (204, 201):
        raise RuntimeError(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è {username}: {rp.status_code} {rp.text}")

    return user_id


def assign_realm_role(token: str, user_id: str, role_name: str):
    """–ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–æ–ª—å realm‚Äô–∞ (idempotent)."""
    h = _headers(token)
    role = get_realm_role(token, role_name)
    a = requests.post(
        f"{KC_BASE_URL}/admin/realms/{REALM_NAME}/users/{user_id}/role-mappings/realm",
        headers=h, json=[role], timeout=20
    )
    if a.status_code in (204, 201):
        print(f"üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å '{role_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id={user_id}")
    elif a.status_code == 409:
        print(f"‚ÑπÔ∏è  –†–æ–ª—å '{role_name}' —É–∂–µ –±—ã–ª–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id={user_id}")
    else:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ '{role_name}': {a.status_code} {a.text}")


def create_test_users(token: str):
    """–°–æ–∑–¥–∞—ë–º/—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∏–º —Ä–æ–ª–∏."""
    for u in TEST_USERS:
        uid = get_or_create_user(
            token,
            username=u["username"],
            email=u["email"],
            first=u["firstName"],
            last=u["lastName"],
            password=u["password"]
        )
        assign_realm_role(token, uid, u["role"])


def main():
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Keycloak (roles/users/client) –¥–ª—è REALM:", REALM_NAME)
    try:
        token = get_admin_token()
        print("‚úÖ –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω")

        print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞‚Ä¶")
        ensure_client(token)

        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π‚Ä¶")
        ensure_roles(token)

        print("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π‚Ä¶")
        create_test_users(token)

        print("\nüéâ –ì–æ—Ç–æ–≤–æ!")
        print("–†–æ–ª–∏:", ", ".join([r["name"] for r in ROLES]))
        print("–¢–µ—Å—Ç-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", ", ".join([u["username"] for u in TEST_USERS]))
        print(f"–ê–¥–º–∏–Ω–∫–∞: {KC_BASE_URL}/admin  | Realm: {REALM_NAME} | Client: {CLIENT_ID}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
